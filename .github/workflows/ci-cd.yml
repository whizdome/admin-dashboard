name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build Docker image
      run: docker build --no-cache -t my-app:latest .

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Run Trivy scan
      run: trivy image my-app:latest

    - name: Run Trivy scan with exit code check
      run: |
        if trivy image --exit-code 1 --severity CRITICAL my-app:latest; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.6

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Plan
      run: terraform -chdir=terraform plan

    - name: Terraform Apply
      run: terraform -chdir=terraform apply -auto-approve

    - name: Deploy to EKS
      run: |
        kubectl config set-cluster my-cluster --server=https://$(terraform output -raw cluster_endpoint)
        kubectl config set-credentials my-user --token=<TOKEN>
        kubectl config set-context my-context --cluster=my-cluster --user=my-user
        kubectl config use-context my-context
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Push Docker image to ECR
      run: |
        aws ecr get-login-password --region <AWS_REGION> | docker login --username AWS --password-stdin <ECR_REPOSITORY_URI>
        docker tag my-app:latest <ECR_REPOSITORY_URI>/my-app:latest
        docker push <ECR_REPOSITORY_URI>/my-app:latest
